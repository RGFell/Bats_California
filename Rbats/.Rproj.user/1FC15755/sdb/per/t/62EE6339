{
    "contents" : "\n#Sampling Design\n###author: Derek Corcoran\n####Last update: `r Sys.Date() `\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(cache=TRUE)\n```\n\nFirst we load the spatial packages\n\n```{r, message=FALSE, warning=FALSE}\nlibrary(\"raster\", lib.loc=\"~/R/win-library/3.2\")\nlibrary(\"rasterVis\", lib.loc=\"~/R/win-library/3.2\")\nlibrary(\"maps\", lib.loc=\"~/R/win-library/3.2\")\nlibrary(\"maptools\", lib.loc=\"~/R/win-library/3.2\")\nlibrary(\"rgdal\", lib.loc=\"~/R/win-library/3.2\")\n```\nThen we read the needed rasters\n\n```{r, message=FALSE, warning=FALSE}\nPNF<- readGDAL(\"C:/Users/usuario/Bats_California/layers/PNF.asc\")\nPNF<-raster (PNF)\nplot(PNF)\nbc <- readGDAL(\"C:/Users/usuario/Bats_California/layers/burn_canopy.asc\")\nbc<-raster (bc)\nplot(bc)\nbb <- readGDAL(\"C:/Users/usuario/Bats_California/layers/burn_basal.asc\")\nbb<-raster (bb)\nplot(bb)\nbs <- readGDAL(\"C:/Users/usuario/Bats_California/layers/burn_severity.asc\")\nbs<-raster (bs)\nplot(bs)\ntopo <- readGDAL(\"C:/Users/usuario/Bats_California/layers/plumastopo.asc\")\ntopo<-raster (topo)\nplot(topo)\nVegetation_existing <- readGDAL(\"C:/Users/usuario/Bats_California/layers/Vegetation_existing.asc\")\nVegetation_existing<-raster (Vegetation_existing)\nplot(Vegetation_existing)\nFireReturnIntervalDeparture <- readGDAL(\"C:/Users/usuario/Bats_California/layers/FireReturnIntervalDeparture.asc\")\nFireReturnIntervalDeparture<-raster (FireReturnIntervalDeparture)\nplot(FireReturnIntervalDeparture)\nTreatmentsStorrie <- readGDAL(\"C:/Users/usuario/Bats_California/layers/TreatmentsStorrie.asc\")\nTreatmentsStorrie<-raster (TreatmentsStorrie)\nplot(TreatmentsStorrie)\n```\n\n#Change outlayers and extract NAs \n\nIn order to classify the raster we will get rid of unnecesary outlayers, and change NAs to 0\n\n```{r}\ndf.bb <- data.frame(id=c(NA,1,2,3,4,5,6,7,255), v=c(0,1,2,3,4,5,6,7,8))\nbb1 <- subs(bb, df.bb,subswithNA=FALSE)\ndf.bs <- data.frame(id=c(NA,1,2,3,4,255), v=c(0,1,2,3,4,5))\nbs1 <- subs(bs, df.bs,subswithNA=FALSE)\ndf.bc <- data.frame(id=c(NA,1,2,3,4,5,255), v=c(0,1,2,3,4,5,6))\nbc1 <- subs(bc, df.bc,subswithNA=FALSE)\n```\n\n#Put all rasters in the same projection\n\n```{r}\nbb<-projectRaster(bb1, PNF)\nbs<-projectRaster(bs1, PNF)\nbc<-projectRaster(bc1, PNF)\nVegetation_existing<-projectRaster(Vegetation_existing, PNF)\nFireReturnIntervalDeparture<-projectRaster(FireReturnIntervalDeparture, PNF)\nTreatmentsStorrie<-projectRaster(TreatmentsStorrie, PNF)\n\n```\n#Put them all in the same resolution and size\n\n```{r}\nbc<-resample(bc, PNF)\nbb<-resample(bb, PNF)\nbs<-resample(bs, PNF)\nVegetation_existing<-resample(Vegetation_existing, PNF)\nFireReturnIntervalDeparture<-resample(FireReturnIntervalDeparture, PNF)\nTreatmentsStorrie<-resample(TreatmentsStorrie, PNF)\ntopo<-resample(topo,PNF)\n```\n\n#Prepare a distance from river/road raster\n\n```{r}\nroads.v <- readOGR(dsn=\"C:/Users/usuario/Bats_California/layers\",layer=\"Roads\")\nroads.v <- spTransform(roads.v, CRS(\"+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs\"))\nplot(PNF)\nlines(roads.v)\ntemplate <- PNF  # this will be the template\ntemplate[] <- NA  # assigns all values as NA\nroads.r <- rasterize(roads.v, template, field=1)\nsummary(roads.r)          # pixels crossed by a road have \"1\" \nplot(roads.r, add=TRUE)\n```\nafter rasterizing the roads we make the new raster\n```{r}\nroaddist.r <- distance(roads.r)\nclass(roaddist.r)\n# Check:\nplot(roaddist.r)\nlines(roads.v)\n```\n#Check for correlation between rasters\n\n```{r}\nAllLayers <-stack(topo,TreatmentsStorrie,FireReturnIntervalDeparture, Vegetation_existing)\nplot (AllLayers, colNA=\"black\")\npairs(AllLayers)\nAllLayers[is.na(AllLayers)] <- 0\nrasterRescale<-function(r){\n    ((r-cellStats(r,\"min\"))/(cellStats(r,\"max\")-cellStats(r,\"min\")))\n}\nAllLayers2<-rasterRescale(AllLayers)\nplot(AllLayers2)\n```\n\n#Clasification example\n\nEven though we shouldn't classify using 3 layers of such high classification we will use the RasterBrick of the three burn classifications to exemplify how we will divide the area into areas of similar characteristics.\nHere we will ask R to use kmeans to sort the area into 3 types of habitat using the abovementioned rasterbrick:\n\n\n#now with every layer\n\n\n```{r, echo=FALSE}\nvaluetable2 <- getValues(AllLayers2)\nhead(valuetable2) \nsummary(valuetable2)\nkm <- kmeans(na.omit(valuetable2), centers = 5, iter.max = 100, nstart = 10)\n# create a blank raster with default values of 0\nrNA <- setValues(raster(AllLayers2), 0)\nfor(i in 1:nlayers(AllLayers2)){\n  rNA[is.na(AllLayers2[[i]])] <- 1\n}\n# convert rNA to an integer vector\nrNA <- getValues(rNA)\n# convert valuetable to a data.frame\nvaluetable2 <- as.data.frame(valuetable2)\n# if rNA is a 0, assign the cluster value at that position\nvaluetable2$class[rNA==0] <- km$cluster\n# if rNA is a 1, assign an NA at that position\nvaluetable2$class[rNA==1] <- NA\n# create a blank raster\nclasses2 <- raster(AllLayers2)\n# assign values from the 'class' column of valuetable\nclasses2.1 <- setValues(classes2, valuetable2$class)\nplot(classes2.1, legend=TRUE)\nsummary (classes2.1)\n```\n\nMore info on how to do this clasification in *https://geoscripting-wur.github.io/AdvancedRasterAnalysis/*\n\n\n#Extract Random points from each habitat type\n\n\n```{r}\nset.seed(10)\ndf.class.4 <- data.frame(id=c(1,2,3,4,5), v=c(1,NA,NA,NA,NA))\nclass4 <- subs(classes2.1, df.class.4,subswithNA=FALSE)\npoints4<-sampleRandom(class4,10, na.rm=TRUE, xy=TRUE)\ndf.class.3 <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,NA,NA,5))\nclass3 <- subs(classes2.1, df.class.3,subswithNA=FALSE)\npoints3<-sampleRandom(class3,10, na.rm=TRUE, xy=TRUE)\nplot(classes2.1)\npoints (points4, col= \"black\")\npoints (points3, col= \"red\")\n```\n\n\n#Simulated sampling Dynamic modeling\n\n```{r}\nlibrary(\"unmarked\", lib.loc=\"~/R/win-library/3.2\")\n```\n\n###First we simulate our detection history for 30 sites with four primary sampling periods, and three secondary sampling periods each.\n```{r, echo=FALSE}\ns1.1a<-rbinom(n=10, size=1, prob=0.7)\ns1.1b<-rbinom(n=10, size=1, prob=0.4)\ns1.1c<-rbinom(n=10, size=1, prob=0.2)\ns1.2a<-rbinom(n=10, size=1, prob=0.7)\ns1.2b<-rbinom(n=10, size=1, prob=0.4)\ns1.2c<-rbinom(n=10, size=1, prob=0.2)\ns1.3a<-rbinom(n=10, size=1, prob=0.7)\ns1.3b<-rbinom(n=10, size=1, prob=0.4)\ns1.3c<-rbinom(n=10, size=1, prob=0.2)\n\ns1.1 <-c(s1.1a,s1.1b,s1.1c)\ns1.2 <-c(s1.2a,s1.2b,s1.2c)\ns1.3 <-c(s1.3a,s1.3b,s1.3c)\n\ns2.1a<-rbinom(n=10, size=1, prob=0.7)\ns2.1b<-rbinom(n=10, size=1, prob=0.4)\ns2.1c<-rbinom(n=10, size=1, prob=0.2)\ns2.2a<-rbinom(n=10, size=1, prob=0.7)\ns2.2b<-rbinom(n=10, size=1, prob=0.4)\ns2.2c<-rbinom(n=10, size=1, prob=0.2)\ns2.3a<-rbinom(n=10, size=1, prob=0.7)\ns2.3b<-rbinom(n=10, size=1, prob=0.4)\ns2.3c<-rbinom(n=10, size=1, prob=0.2)\n\ns2.1 <-c(s2.1a,s2.1b,s2.1c)\ns2.2 <-c(s2.2a,s2.2b,s2.2c)\ns2.3 <-c(s2.3a,s2.3b,s2.3c)\n\ns3.1a<-rbinom(n=10, size=1, prob=0.9)\ns3.1b<-rbinom(n=10, size=1, prob=0.4)\ns3.1c<-rbinom(n=10, size=1, prob=0.1)\ns3.2a<-rbinom(n=10, size=1, prob=0.9)\ns3.2b<-rbinom(n=10, size=1, prob=0.4)\ns3.2c<-rbinom(n=10, size=1, prob=0.2)\ns3.3a<-rbinom(n=10, size=1, prob=0.9)\ns3.3b<-rbinom(n=10, size=1, prob=0.4)\ns3.3c<-rbinom(n=10, size=1, prob=0.1)\n\ns3.1 <-c(s3.1a,s3.1b,s3.1c)\ns3.2 <-c(s3.2a,s3.2b,s3.2c)\ns3.3 <-c(s3.3a,s3.3b,s3.3c)\n\ns4.1a<-rbinom(n=10, size=1, prob=0.9)\ns4.1b<-rbinom(n=10, size=1, prob=0.4)\ns4.1c<-rbinom(n=10, size=1, prob=0.1)\ns4.2a<-rbinom(n=10, size=1, prob=0.9)\ns4.2b<-rbinom(n=10, size=1, prob=0.4)\ns4.2c<-rbinom(n=10, size=1, prob=0.1)\ns4.3a<-rbinom(n=10, size=1, prob=0.9)\ns4.3b<-rbinom(n=10, size=1, prob=0.4)\ns4.3c<-rbinom(n=10, size=1, prob=0.1)\n\ns4.1 <-c(s4.1a,s4.1b,s4.1c)\ns4.2 <-c(s4.2a,s4.2b,s4.2c)\ns4.3 <-c(s4.3a,s4.3b,s4.3c)\nsampling.ocup<- cbind(s1.1,s1.2,s1.3,s2.1,s2.2,s2.3,s3.1,s3.2,s3.3,s4.1,s4.2,s4.3)\n```\n\nThis simulated data has some underlying charachteristics:\n\n**environment a (top 10 rows, the best environment for bats, also occupancy increases with time)**\n```{r}\nmean(sampling.ocup[1:10])\n```\n**environment b (rows 11 to 20, medium environment, occupancy stays the same)**\n```{r}\nmean(sampling.ocup[11:20])\n```\n**environment c (rows 21 to 30) poor environment for bats, also there is extintion)**\n```{r}\nmean(sampling.ocup[21:30])\n```\n\nNow we will simulate some variables for the site covariates.\n###Site cov static\n**the more variable 1, the better for bats**\n\n```{r, echo=FALSE}\nv.1a<-rnorm(n=10, mean=20, sd=0.7)\nv.1b<-rnorm(n=10, mean=10, sd=0.7)\nv.1c<-rnorm(n=10, mean=5, sd=0.7)\n\nv.1 <-c(v.1a,v.1b,v.1c)\n```\n\n```{r}\nmean(v.1[1:10])\nmean(v.1[11:20])\nmean(v.1[21:30])\n```\n\n\n###the less variable 2 better for bats\n```{r,echo=FALSE}\nv.2a<-rnorm(n=10, mean=20, sd=0.7)\nv.2b<-rnorm(n=10, mean=40, sd=0.7)\nv.2c<-rnorm(n=10, mean=60, sd=0.7)\n\nv.2 <-c(v.2a,v.2b,v.2c)\n```\n\n```{r}\nmean(v.2[1:10])\nmean(v.2[11:20])\nmean(v.2[21:30])\n```\n\n###variable 3 does not mater to bats\n\n```{r,echo=FALSE}\nv.3a<-rnorm(n=10, mean=20, sd=0.7)\nv.3b<-rnorm(n=10, mean=20, sd=0.7)\nv.3c<-rnorm(n=10, mean=20, sd=0.7)\n\n\nv.3 <-c(v.3a,v.3b,v.3c)\n```\n\n```{r}\nmean(v.3[1:10])\nmean(v.3[11:20])\nmean(v.3[21:30])\n```\n\n```{r}\nsampling.cov<- cbind(v.1,v.2, v.3)\n```\n###yearly colonization extintion variable\n\n```{r}\ntemp1<-rnorm(n=30, mean=20, sd=10)\ntemp2<-rnorm(n=30, mean=40, sd=10)\ntemp3<-rnorm(n=30, mean=50, sd=10)\ntemp4<-rnorm(n=30, mean=60, sd=10)\n\n\ntemps <-cbind(temp1,temp2, temp3, temp4)\n```\n###observer within secondary it could be variable\n\n\n###observers dont vary in the model, they should all be the same\n\n```{r}\nobs1<-rnorm(n=30, mean=40, sd=0.7)\nobs2<-rnorm(n=30, mean=40, sd=0.7)\nobs3<-rnorm(n=30, mean=40, sd=0.7)\nobs4<-rnorm(n=30, mean=40, sd=0.7)\nobs5<-rnorm(n=30, mean=40, sd=0.7)\nobs6<-rnorm(n=30, mean=40, sd=0.7)\nobs7<-rnorm(n=30, mean=40, sd=0.7)\nobs8<-rnorm(n=30, mean=40, sd=0.7)\nobs9<-rnorm(n=30, mean=40, sd=0.7)\nobs10<-rnorm(n=30, mean=40, sd=0.7)\nobs11<-rnorm(n=30, mean=40, sd=0.7)\nobs12<-rnorm(n=30, mean=40, sd=0.7)\n\nobservers1<-data.frame(cbind(obs1,obs2,obs3, obs4, obs5, obs6, obs7, obs8, obs9, obs10, obs11, obs12))\n\nobservers2<-data.frame(cbind(obs1,obs2,obs3, obs4, obs5, obs6, obs7, obs8, obs9, obs10, obs11, obs12))\n\nobservers<-list(observers1, observers2)\nnames(observers) <-c(\"obs1\", \"obs2\")\n```\n###primary model\n```{r}\numf <- unmarkedMultFrame(y = sampling.ocup, \n                            siteCovs = data.frame(sampling.cov), \n                            yearlySiteCovs=data.frame(temps),\n                            obsCovs=observers, numPrimary=3)\n```\n##Dynamic model\nfirst term static variables\nsecond term colonization (variable)\nthird extintion (variable)\ndetection (observer)\n###the best model should take into acount v.1 and v.2, but not v.3, it shouldn't take into acount observers\n\n```{r}\nmodel1 <- colext(~v.1+v.2+v.3, ~temp1, ~temp1, ~obs1+obs2, umf)\n\nmodel2 <- colext(~1, ~1, ~1, ~1, umf)\n\nmodel3 <- colext(~v.1+v.2, ~temp1, ~temp1, ~1, umf) #this should be the best model\nmodel4 <-colext(~v.1+v.2, ~1, ~1, ~1, umf)\n```\n###graph",
    "created" : 1430464606338.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3370324441",
    "id" : "62EE6339",
    "lastKnownWriteTime" : 1430794541,
    "path" : "C:/Users/usuario/Bats_California/Rbats/Sampling_Design2.Rmd",
    "project_path" : "Sampling_Design2.Rmd",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}