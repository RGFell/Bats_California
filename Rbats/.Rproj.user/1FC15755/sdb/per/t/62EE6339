{
    "contents" : "\n#Sampling Design\n###author: Derek Corcoran\n####Last update: `r Sys.Date() `\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(cache=TRUE)\n```\n\nFirst we load the spatial packages\n\n```{r, message=FALSE, warning=FALSE}\nlibrary(\"raster\", lib.loc=\"~/R/win-library/3.2\")\nlibrary(\"rasterVis\", lib.loc=\"~/R/win-library/3.2\")\nlibrary(\"maps\", lib.loc=\"~/R/win-library/3.2\")\nlibrary(\"maptools\", lib.loc=\"~/R/win-library/3.2\")\nlibrary(\"rgdal\", lib.loc=\"~/R/win-library/3.2\")\n```\nThen we read the needed rasters\n\n```{r, message=FALSE, warning=FALSE}\nPNF<- readGDAL(\"C:/Users/usuario/Bats_California/layers/PNF.asc\")\nPNF<-raster (PNF)\nplot(PNF)\nbc <- readGDAL(\"C:/Users/usuario/Bats_California/layers/burn_canopy.asc\")\nbc<-raster (bc)\nplot(bc)\nbb <- readGDAL(\"C:/Users/usuario/Bats_California/layers/burn_basal.asc\")\nbb<-raster (bb)\nplot(bb)\nbs <- readGDAL(\"C:/Users/usuario/Bats_California/layers/burn_severity.asc\")\nbs<-raster (bs)\nplot(bs)\ntopo <- readGDAL(\"C:/Users/usuario/Bats_California/layers/plumastopo.asc\")\ntopo<-raster (topo)\nplot(topo)\nVegetation_existing <- readGDAL(\"C:/Users/usuario/Bats_California/layers/Vegetation_existing.asc\")\nVegetation_existing<-raster (Vegetation_existing)\nplot(Vegetation_existing)\nFireReturnIntervalDeparture <- readGDAL(\"C:/Users/usuario/Bats_California/layers/FireReturnIntervalDeparture.asc\")\nFireReturnIntervalDeparture<-raster (FireReturnIntervalDeparture)\nplot(FireReturnIntervalDeparture)\nTreatmentsStorrie <- readGDAL(\"C:/Users/usuario/Bats_California/layers/TreatmentsStorrie.asc\")\nTreatmentsStorrie<-raster (TreatmentsStorrie)\nplot(TreatmentsStorrie)\n```\n\n#Change outlayers and extract NAs \n\nIn order to classify the raster we will get rid of unnecesary outlayers, and change NAs to 0\n\n```{r}\ndf.bb <- data.frame(id=c(NA,1,2,3,4,5,6,7,255), v=c(0,1,2,3,4,5,6,7,8))\nbb1 <- subs(bb, df.bb,subswithNA=FALSE)\ndf.bs <- data.frame(id=c(NA,1,2,3,4,255), v=c(0,1,2,3,4,5))\nbs1 <- subs(bs, df.bs,subswithNA=FALSE)\ndf.bc <- data.frame(id=c(NA,1,2,3,4,5,255), v=c(0,1,2,3,4,5,6))\nbc1 <- subs(bc, df.bc,subswithNA=FALSE)\n```\n\n#Put all rasters in the same projection\n\n```{r}\nbb<-projectRaster(bb1, PNF)\nbs<-projectRaster(bs1, PNF)\nbc<-projectRaster(bc1, PNF)\nVegetation_existing<-projectRaster(Vegetation_existing, PNF)\nFireReturnIntervalDeparture<-projectRaster(FireReturnIntervalDeparture, PNF)\nTreatmentsStorrie<-projectRaster(TreatmentsStorrie, PNF)\n\n```\n#Put them all in the same resolution and size\n\n```{r}\nbc<-resample(bc, PNF)\nbb<-resample(bb, PNF)\nbs<-resample(bs, PNF)\nVegetation_existing<-resample(Vegetation_existing, PNF)\nFireReturnIntervalDeparture<-resample(FireReturnIntervalDeparture, PNF)\nTreatmentsStorrie<-resample(TreatmentsStorrie, PNF)\ntopo<-resample(topo,PNF)\n```\n\n#Prepare a distance from river/road raster\n\n```{r}\nroads.v <- readOGR(dsn=\"C:/Users/usuario/Bats_California/layers\",layer=\"Roads\")\nroads.v <- spTransform(roads.v, CRS(\"+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs\"))\nplot(PNF)\nlines(roads.v)\ntemplate <- PNF  # this will be the template\ntemplate[] <- NA  # assigns all values as NA\nroads.r <- rasterize(roads.v, template, field=1)\nsummary(roads.r)          # pixels crossed by a road have \"1\" \nplot(roads.r, add=TRUE)\n```\nafter rasterizing the roads we make the new raster\n```{r}\nroaddist.r <- distance(roads.r)\nclass(roaddist.r)\n# Check:\nplot(roaddist.r)\nlines(roads.v)\n```\n#Check for correlation between rasters\n\n```{r}\nAllLayers <-stack(topo,TreatmentsStorrie,FireReturnIntervalDeparture, Vegetation_existing, roaddist.r)\nplot (AllLayers, colNA=\"black\")\npairs(AllLayers)\nAllLayers[is.na(AllLayers)] <- 0\nplot(AllLayers)\n```\n\n#Clasification example\n\nEven though we shouldn't classify using 3 layers of such high classification we will use the RasterBrick of the three burn classifications to exemplify how we will divide the area into areas of similar characteristics.\nHere we will ask R to use kmeans to sort the area into 3 types of habitat using the abovementioned rasterbrick:\n\n```{r, echo=FALSE}\nvaluetable <- getValues(burn)\nhead(valuetable)\nkm <- kmeans(na.omit(valuetable), centers = 3, iter.max = 100, nstart = 10)\n# create a blank raster with default values of 0\nrNA <- setValues(raster(burn), 0)\nfor(i in 1:nlayers(burn)){\n  rNA[is.na(burn[[i]])] <- 1\n}\n# convert rNA to an integer vector\nrNA <- getValues(rNA)\n# convert valuetable to a data.frame\nvaluetable <- as.data.frame(valuetable)\n# if rNA is a 0, assign the cluster value at that position\nvaluetable$class[rNA==0] <- km$cluster\n# if rNA is a 1, assign an NA at that position\nvaluetable$class[rNA==1] <- NA\n# create a blank raster\nclasses <- raster(burn)\n# assign values from the 'class' column of valuetable\nclasses <- setValues(classes, valuetable$class)\nplot(classes, legend=FALSE,col=c(\"dark green\", \"orange\", \"light blue\"))\n```\n\n#now with every layer\n\n```{r, echo=FALSE}\nvaluetable2 <- getValues(AllLayers)\nhead(valuetable2)\nvaluetable2 <- data.frame(lapply(valuetable2, function(x) scale(x, center = FALSE, scale = max(x, na.rm = TRUE))))\nsummary(valuetable2)\nkm <- kmeans(na.omit(valuetable2), centers = 5, iter.max = 100, nstart = 10)\n# create a blank raster with default values of 0\nrNA <- setValues(raster(AllLayers), 0)\nfor(i in 1:nlayers(AllLayers)){\n  rNA[is.na(AllLayers[[i]])] <- 1\n}\n# convert rNA to an integer vector\nrNA <- getValues(rNA)\n# convert valuetable to a data.frame\nvaluetable2 <- as.data.frame(valuetable2)\n# if rNA is a 0, assign the cluster value at that position\nvaluetable2$class[rNA==0] <- km$cluster\n# if rNA is a 1, assign an NA at that position\nvaluetable2$class[rNA==1] <- NA\n# create a blank raster\nclasses <- raster(AllLayers)\n# assign values from the 'class' column of valuetable\nclasses2 <- setValues(classes, valuetable2$class)\nplot(classes2, legend=TRUE)\nsummary (classes2)\n```\n\nMore info on how to do this clasification in *https://geoscripting-wur.github.io/AdvancedRasterAnalysis/*\n\n#Extract Random points from each habitat type\n\n```{r}\nset.seed(10)\ndf.class.4 <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,NA,4,NA))\nclass4 <- subs(classes2, df.class.4,subswithNA=FALSE)\npoints4<-sampleRandom(class4,10, na.rm=TRUE, xy=TRUE)\ndf.class.3 <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,3,NA,NA))\nclass3 <- subs(classes2, df.class.3,subswithNA=FALSE)\npoints3<-sampleRandom(class3,10, na.rm=TRUE, xy=TRUE)\nplot(classes2)\npoints (points4, col= \"black\")\npoints (points3, col= \"red\")\n```",
    "created" : 1430464606338.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2000183236",
    "id" : "62EE6339",
    "lastKnownWriteTime" : 1430468907,
    "path" : "C:/Users/usuario/Bats_California/Rbats/Sampling_Design2.Rmd",
    "project_path" : "Sampling_Design2.Rmd",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}