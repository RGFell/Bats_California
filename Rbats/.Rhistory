MartenHabit<- projectRaster(MartenHabit, PNF)
SeralStage<- projectRaster(SeralStage,PNF)
bc<-resample(bc, PNF)
bb<-resample(bb, PNF)
bs<-resample(bs, PNF)
Vegetation_existing<-resample(Vegetation_existing, PNF, method="ngb")
FireReturnAll<-resample(FireReturnAll, PNF)
TreatmentsStorrie<-resample(TreatmentsStorrie, PNF)
FireHistory<-resample(FireHistory, PNF)
topo<-resample(topo,PNF)
Goshawkforag<-resample(Goshawkforag,PNF, method="ngb")
GoshawkNEST <- resample(GoshawkNEST, PNF, method="ngb")
TreatmentsStorrie[is.na(TreatmentsStorrie)] <- 0
MartenHabit <- resample (MartenHabit, PNF, method="ngb")
SeralStage <- resample (SeralStage, PNF, method="ngb")
ratify(Vegetation_existing, count=TRUE)
FireReturnAll[FireReturnAll < 0] <- NA
roads.v <- readOGR(dsn="C:/Users/usuario/Bats_California/layers",layer="Roads")
roads.v <- spTransform(roads.v, CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
template <- PNF  # this will be the template
template[] <- NA  # assigns all values as NA
roads.r <- rasterize(roads.v, template, field=1)
roaddist.r <- distance(roads.r)
roaddist.r<- roaddist.r*PNF
rivers <- readOGR(dsn="C:/Users/usuario/Bats_California/layers",layer="NHDFlowline")
rivers <- spTransform(rivers, CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
template2 <- PNF  # this will be the template
template2[] <- NA  # assigns all values as NA
rivers.r <- rasterize(rivers, template2, field=1)
riverdist.r <- distance(rivers.r)
riverdist.r<- riverdist.r*PNF
burn.age<- stack(FireReturnAll, FireHistory)
names(burn.age)<- c("Fire Interval", "Fire History")
plot(burn.age)
burn<- stack(bs,bc,bb)
names(burn)<-c("Burn soil", "Burn canopy", "Burn basal")
plot(burn)
Forest.Type <- stack(Vegetation_existing,SeralStage,FireReturnAll)
names(Forest.Type) <- c("Vegetation Type","Seral Stage", "Fire Interval")
plot(Forest.Type)
library("raster", lib.loc="~/R/win-library/3.2")
plot(PNF)
plot(bs, add=TRUE, legend=FALSE)
plot(lidar.limit, add=TRUE, legend=FALSE)
abiotic <- stack(roaddist.r, topo, riverdist.r)
names(abiotic)<-c("Road distance", "Altitud", "River distance")
plot(abiotic, colNA="black")
library("raster", lib.loc="~/R/win-library/3.2")
AllLayers1 <-stack(topo,FireReturnAll,roaddist.r, Vegetation_existing, riverdist.r)
names(AllLayers1)<-c("Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
slope<-terrain(topo, opt=c("slope"), unit= "degrees",neighbors=8)
summary(slope)
slope[slope > 15] <- NA
slope.15<-slope*PNF
plot(slope.15,colNA="black")
slope.15[slope.15 >= 0] <- 1
AllLayers1<-AllLayers1*slope.15
AllLayers2<-AllLayers1*PNF
names(AllLayers2)<-c("Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
plot (AllLayers2, colNA="black")
pairs(AllLayers2)
rasterRescale<-function(r){
((r-cellStats(r,"min"))/(cellStats(r,"max")-cellStats(r,"min")))
}
AllLayers2<-rasterRescale(AllLayers2)
#AllLayers2<-dropLayer(AllLayers2,5)
plot(AllLayers2)
valuetable <- getValues(AllLayers2)
km1 <- kmeans(na.omit(valuetable), centers = 5, iter.max = 100, nstart = 10)
# create a blank raster with default values of 0
rNA <- setValues(raster(AllLayers2), 0)
for(i in 1:nlayers(AllLayers2)){
rNA[is.na(AllLayers2[[i]])] <- 1
}
# convert rNA to an integer vector
rNA <- getValues(rNA)
# convert valuetable to a data.frame
valuetable <- as.data.frame(valuetable)
# if rNA is a 0, assign the cluster value at that position
valuetable$class[rNA==0] <- km1$cluster
# if rNA is a 1, assign an NA at that position
valuetable$class[rNA==1] <- NA
# create a blank raster
classes1 <- raster(AllLayers2)
# assign values from the 'class' column of valuetable
classes1 <- setValues(classes1, valuetable$class)
plot(classes1, legend=TRUE, colNA="black")
df.bs1 <- data.frame(id=c(0,1,2,3,4,5), v=c(NA,1,1,1,1,1))
fire <- subs(bs1, df.bs1,subswithNA=FALSE)
fire<-projectRaster(fire, PNF)
df.bs2 <- data.frame(id=c(NA,1), v=c(1,NA))
not.fire <- subs(fire, df.bs2,subswithNA=FALSE)
classes.with.fire<-classes1*fire
classes.without.fire<-classes1*not.fire
plot(classes.with.fire,colNA="black", main="Classification within burned area")
plot(classes.without.fire,colNA="black",main="Classification within non-burned area")
library(rgdal)
set.seed(12)
df.class.1f <- data.frame(id=c(1,2,3,4,5), v=c(1,NA,NA,NA,NA))
class1f <- subs(classes.with.fire, df.class.1f,subswithNA=FALSE)
points1f<-sampleRandom(class1f,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.1nf <- data.frame(id=c(1,2,3,4,5), v=c(1,NA,NA,NA,NA))
class1nf <- subs(classes.without.fire, df.class.1nf,subswithNA=FALSE)
points1nf<-sampleRandom(class1nf,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.2f <- data.frame(id=c(1,2,3,4,5), v=c(NA,2,NA,NA,NA))
class2f <- subs(classes.with.fire, df.class.2f,subswithNA=FALSE)
points2f<-sampleRandom(class2f,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.2nf <- data.frame(id=c(1,2,3,4,5), v=c(NA,2,NA,NA,NA))
class2nf <- subs(classes.without.fire, df.class.2nf,subswithNA=FALSE)
points2nf<-sampleRandom(class2nf,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.3f <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,3,NA,NA))
class3f <- subs(classes.with.fire, df.class.3f,subswithNA=FALSE)
points3f<-sampleRandom(class3f,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.3nf <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,3,NA,NA))
class3nf <- subs(classes.without.fire, df.class.3nf,subswithNA=FALSE)
points3nf<-sampleRandom(class3nf,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.4f <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,NA,4,NA))
class4f <- subs(classes.with.fire, df.class.4f,subswithNA=FALSE)
points4f<-sampleRandom(class4f,12, na.rm=TRUE, xy=TRUE, sp= TRUE)
df.class.4nf <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,NA,4,NA))
class4nf <- subs(classes.without.fire, df.class.4nf,subswithNA=FALSE)
points4nf<-sampleRandom(class4nf,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.5f <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,NA,NA,5))
class5f <- subs(classes.with.fire, df.class.5f,subswithNA=FALSE)
points5f<-sampleRandom(class5f,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.5nf <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,NA,NA,5))
class5nf <- subs(classes.without.fire, df.class.5nf,subswithNA=FALSE)
points5nf<-sampleRandom(class5nf,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
library("rasterVis", lib.loc="~/R/win-library/3.2")
topo.park<-(topo*PNF)
arterial<-roads.v[roads.v$FUNCTIONAL=="A - ARTERIAL",]
collector<-roads.v[roads.v$FUNCTIONAL=="C - COLLECTOR",]
local<-roads.v[roads.v$FUNCTIONAL=="L - LOCAL",]
levelplot(topo.park, contour=TRUE, margin=FALSE)+ layer(sp.points(points5nf, col="purple", pch=17))+ layer(sp.points(points5f, col="purple", pch=19))+ layer(sp.points(points4nf, col="brown", pch=17))+ layer(sp.points(points4f, col="brown", pch=19))+ layer(sp.points(points3nf, col="red", pch=17))+ layer(sp.points(points3f, col="red", pch=19))+ layer(sp.points(points2nf, col="blue", pch=17))+ layer(sp.points(points2f, col="blue", pch=19))+ layer(sp.points(points1nf, col="black", pch=17))+ layer(sp.points(points1f, col="black", pch=19))+layer(sp.lines(arterial, col="red", lw=2))+layer(sp.lines(collector, col="red", lw=1, lty=2))
library(dplyr)
df.values<-extract(AllLayers1, points1nf, df=TRUE, method="simple")
df.values<-df.values[,2:6]
df.values<-cbind(points1nf$x, points1nf$y, df.values,rep("1nf", times=12))
colnames(df.values)<- c("Long", "Lat","Height","Fire_Interval", "Distance_to_Road", "Veg_Type", "Distance_to_Water", "ID")
df.values$Long=df.values$Long*-1
df.values1f<-extract(AllLayers1, points1f, df=TRUE, method="simple")
df.values1f<-df.values1f[,2:6]
df.values1f<-cbind(points1f$x, points1f$y, df.values1f,rep("1f", times=12))
colnames(df.values1f)<- c("Long", "Lat","Height","Fire_Interval", "Distance_to_Road", "Veg_Type", "Distance_to_Water", "ID")
df.values1f$Long=df.values1f$Long*-1
df.values2nf<-extract(AllLayers1, points2nf, df=TRUE, method="simple")
df.values2nf<-df.values2nf[,2:6]
df.values2nf<-cbind(points2nf$x, points2nf$y, df.values2nf,rep("2nf", times=12))
colnames(df.values2nf)<- c("Long", "Lat","Height","Fire_Interval", "Distance_to_Road", "Veg_Type", "Distance_to_Water", "ID")
df.values2nf$Long=df.values2nf$Long*-1
df.values2f<-extract(AllLayers1, points2f, df=TRUE, method="simple")
df.values2f<-df.values2f[,2:6]
df.values2f<-cbind(points2f$x, points2f$y, df.values2f,rep("2f", times=12))
colnames(df.values2f)<- c("Long", "Lat","Height","Fire_Interval", "Distance_to_Road", "Veg_Type", "Distance_to_Water", "ID")
df.values2f$Long=df.values2f$Long*-1
df.values3nf<-extract(AllLayers1, points3nf, df=TRUE, method="simple")
df.values3nf<-df.values3nf[,2:6]
df.values3nf<-cbind(points3nf$x, points3nf$y, df.values3nf,rep("3nf", times=12))
colnames(df.values3nf)<- c("Long", "Lat","Height","Fire_Interval", "Distance_to_Road", "Veg_Type", "Distance_to_Water", "ID")
df.values3nf$Long=df.values3nf$Long*-1
df.values3f<-extract(AllLayers1, points3f, df=TRUE, method="simple")
df.values3f<-df.values3f[,2:6]
df.values3f<-cbind(points3f$x, points3f$y, df.values3f,rep("3f", times=12))
colnames(df.values3f)<- c("Long", "Lat","Height","Fire_Interval", "Distance_to_Road", "Veg_Type", "Distance_to_Water", "ID")
df.values3f$Long=df.values3f$Long*-1
df.values4nf<-extract(AllLayers1, points4nf, df=TRUE, method="simple")
df.values4nf<-df.values4nf[,2:6]
df.values4nf<-cbind(points4nf$x, points4nf$y, df.values4nf,rep("4nf", times=12))
colnames(df.values4nf)<- c("Long", "Lat","Height","Fire_Interval", "Distance_to_Road", "Veg_Type", "Distance_to_Water", "ID")
df.values4nf$Long=df.values4nf$Long*-1
df.values4f<-extract(AllLayers1, points4f, df=TRUE, method="simple")
df.values4f<-df.values4f[,2:6]
df.values4f<-cbind(points4f$x, points4f$y, df.values4f,rep("4f", times=12))
colnames(df.values4f)<- c("Long", "Lat","Height","Fire_Interval", "Distance_to_Road", "Veg_Type", "Distance_to_Water", "ID")
df.values4f$Long=df.values4f$Long*-1
df.values5nf<-extract(AllLayers1, points5nf, df=TRUE, method="simple")
df.values5nf<-df.values5nf[,2:6]
df.values5nf<-cbind(points5nf$x, points5nf$y, df.values5nf,rep("5nf", times=12))
colnames(df.values5nf)<- c("Long", "Lat","Height","Fire_Interval", "Distance_to_Road", "Veg_Type", "Distance_to_Water", "ID")
df.values5nf$Long=df.values5nf$Long*-1
df.values5f<-extract(AllLayers1, points5f, df=TRUE, method="simple")
df.values5f<-df.values5f[,2:6]
df.values5f<-cbind(points5f$x, points5f$y, df.values5f,rep("5f", times=12))
colnames(df.values5f)<- c("Long", "Lat","Height","Fire_Interval", "Distance_to_Road", "Veg_Type", "Distance_to_Water", "ID")
df.values5f$Long=df.values5f$Long*-1
df.values<-rbind(df.values, df.values1f, df.values2nf, df.values2f, df.values3nf, df.values3f, df.values4nf, df.values4f, df.values5nf, df.values5f)
by_group <- group_by(df.values, ID)
by_group <- summarise(by_group, mean(Height), mean(Fire_Interval), mean(Distance_to_Road), mean(Veg_Type), mean(Distance_to_Water))
library("knitr", lib.loc="~/R/win-library/3.2")
kable(by_group, col.names=c("ID","Height","Fire Interval", "Distance to Road", "Sage Stage", "Distance to Water"), caption="Mean value for every variable for each ID which combines prior classification (1 to 5) and fire or no fire (f or nf)")
library("unmarked", lib.loc="~/R/win-library/3.2")
set.seed(20)
s1.1f<-rbinom(n=3, size=1, prob=0.8)
s2.1f<-rbinom(n=3, size=1, prob=0.8)
s3.1f<-rbinom(n=3, size=1, prob=0.8)
s4.1f<-rbinom(n=3, size=1, prob=0.8)
s5.1f<-rbinom(n=3, size=1, prob=0.8)
s6.1f<-rbinom(n=3, size=1, prob=0.8)
s7.1f<-rbinom(n=3, size=1, prob=0.8)
s8.1f<-rbinom(n=3, size=1, prob=0.8)
s9.1f<-rbinom(n=3, size=1, prob=0.8)
s10.1f<-rbinom(n=3, size=1, prob=0.8)
s11.1f<-rbinom(n=3, size=1, prob=0.8)
s12.1f<-rbinom(n=3, size=1, prob=0.8)
s1.1nf<-rbinom(n=3, size=1, prob=0.85)
s2.1nf<-rbinom(n=3, size=1, prob=0.85)
s3.1nf<-rbinom(n=3, size=1, prob=0.85)
s4.1nf<-rbinom(n=3, size=1, prob=0.85)
s5.1nf<-rbinom(n=3, size=1, prob=0.85)
s6.1nf<-rbinom(n=3, size=1, prob=0.85)
s7.1nf<-rbinom(n=3, size=1, prob=0.85)
s8.1nf<-rbinom(n=3, size=1, prob=0.85)
s9.1nf<-rbinom(n=3, size=1, prob=0.85)
s10.1nf<-rbinom(n=3, size=1, prob=0.85)
s11.1nf<-rbinom(n=3, size=1, prob=0.85)
s12.1nf<-rbinom(n=3, size=1, prob=0.85)
s1.2f<-rbinom(n=3, size=1, prob=0.65)
s2.2f<-rbinom(n=3, size=1, prob=0.65)
s3.2f<-rbinom(n=3, size=1, prob=0.65)
s4.2f<-rbinom(n=3, size=1, prob=0.65)
s5.2f<-rbinom(n=3, size=1, prob=0.65)
s6.2f<-rbinom(n=3, size=1, prob=0.65)
s7.2f<-rbinom(n=3, size=1, prob=0.65)
s8.2f<-rbinom(n=3, size=1, prob=0.65)
s9.2f<-rbinom(n=3, size=1, prob=0.65)
s10.2f<-rbinom(n=3, size=1, prob=0.65)
s11.2f<-rbinom(n=3, size=1, prob=0.65)
s12.2f<-rbinom(n=3, size=1, prob=0.65)
s1.2nf<-rbinom(n=3, size=1, prob=0.70)
s2.2nf<-rbinom(n=3, size=1, prob=0.70)
s3.2nf<-rbinom(n=3, size=1, prob=0.70)
s4.2nf<-rbinom(n=3, size=1, prob=0.70)
s5.2nf<-rbinom(n=3, size=1, prob=0.70)
s6.2nf<-rbinom(n=3, size=1, prob=0.70)
s7.2nf<-rbinom(n=3, size=1, prob=0.70)
s8.2nf<-rbinom(n=3, size=1, prob=0.70)
s9.2nf<-rbinom(n=3, size=1, prob=0.70)
s10.2nf<-rbinom(n=3, size=1, prob=0.70)
s11.2nf<-rbinom(n=3, size=1, prob=0.70)
s12.2nf<-rbinom(n=3, size=1, prob=0.70)
s1.3f<-rbinom(n=3, size=1, prob=0.45)
s2.3f<-rbinom(n=3, size=1, prob=0.45)
s3.3f<-rbinom(n=3, size=1, prob=0.45)
s4.3f<-rbinom(n=3, size=1, prob=0.45)
s5.3f<-rbinom(n=3, size=1, prob=0.45)
s6.3f<-rbinom(n=3, size=1, prob=0.45)
s7.3f<-rbinom(n=3, size=1, prob=0.45)
s8.3f<-rbinom(n=3, size=1, prob=0.45)
s9.3f<-rbinom(n=3, size=1, prob=0.45)
s10.3f<-rbinom(n=3, size=1, prob=0.45)
s11.3f<-rbinom(n=3, size=1, prob=0.45)
s12.3f<-rbinom(n=3, size=1, prob=0.45)
s1.3nf<-rbinom(n=3, size=1, prob=0.50)
s2.3nf<-rbinom(n=3, size=1, prob=0.50)
s3.3nf<-rbinom(n=3, size=1, prob=0.50)
s4.3nf<-rbinom(n=3, size=1, prob=0.50)
s5.3nf<-rbinom(n=3, size=1, prob=0.50)
s6.3nf<-rbinom(n=3, size=1, prob=0.50)
s7.3nf<-rbinom(n=3, size=1, prob=0.50)
s8.3nf<-rbinom(n=3, size=1, prob=0.50)
s9.3nf<-rbinom(n=3, size=1, prob=0.50)
s10.3nf<-rbinom(n=3, size=1, prob=0.50)
s11.3nf<-rbinom(n=3, size=1, prob=0.50)
s12.3nf<-rbinom(n=3, size=1, prob=0.50)
s1.4f<-rbinom(n=3, size=1, prob=0.25)
s2.4f<-rbinom(n=3, size=1, prob=0.25)
s3.4f<-rbinom(n=3, size=1, prob=0.25)
s4.4f<-rbinom(n=3, size=1, prob=0.25)
s5.4f<-rbinom(n=3, size=1, prob=0.25)
s6.4f<-rbinom(n=3, size=1, prob=0.25)
s7.4f<-rbinom(n=3, size=1, prob=0.25)
s8.4f<-rbinom(n=3, size=1, prob=0.25)
s9.4f<-rbinom(n=3, size=1, prob=0.25)
s10.4f<-rbinom(n=3, size=1, prob=0.25)
s11.4f<-rbinom(n=3, size=1, prob=0.25)
s12.4f<-rbinom(n=3, size=1, prob=0.25)
s1.4nf<-rbinom(n=3, size=1, prob=0.30)
s2.4nf<-rbinom(n=3, size=1, prob=0.30)
s3.4nf<-rbinom(n=3, size=1, prob=0.30)
s4.4nf<-rbinom(n=3, size=1, prob=0.30)
s5.4nf<-rbinom(n=3, size=1, prob=0.30)
s6.4nf<-rbinom(n=3, size=1, prob=0.30)
s7.4nf<-rbinom(n=3, size=1, prob=0.30)
s8.4nf<-rbinom(n=3, size=1, prob=0.30)
s9.4nf<-rbinom(n=3, size=1, prob=0.30)
s10.4nf<-rbinom(n=3, size=1, prob=0.30)
s11.4nf<-rbinom(n=3, size=1, prob=0.30)
s12.4nf<-rbinom(n=3, size=1, prob=0.30)
s1.5f<-rbinom(n=3, size=1, prob=0.15)
s2.5f<-rbinom(n=3, size=1, prob=0.15)
s3.5f<-rbinom(n=3, size=1, prob=0.15)
s4.5f<-rbinom(n=3, size=1, prob=0.15)
s5.5f<-rbinom(n=3, size=1, prob=0.15)
s6.5f<-rbinom(n=3, size=1, prob=0.15)
s7.5f<-rbinom(n=3, size=1, prob=0.15)
s8.5f<-rbinom(n=3, size=1, prob=0.15)
s9.5f<-rbinom(n=3, size=1, prob=0.15)
s10.5f<-rbinom(n=3, size=1, prob=0.15)
s11.5f<-rbinom(n=3, size=1, prob=0.15)
s12.5f<-rbinom(n=3, size=1, prob=0.15)
s1.5nf<-rbinom(n=3, size=1, prob=0.10)
s2.5nf<-rbinom(n=3, size=1, prob=0.10)
s3.5nf<-rbinom(n=3, size=1, prob=0.10)
s4.5nf<-rbinom(n=3, size=1, prob=0.10)
s5.5nf<-rbinom(n=3, size=1, prob=0.10)
s6.5nf<-rbinom(n=3, size=1, prob=0.10)
s7.5nf<-rbinom(n=3, size=1, prob=0.10)
s8.5nf<-rbinom(n=3, size=1, prob=0.10)
s9.5nf<-rbinom(n=3, size=1, prob=0.10)
s10.5nf<-rbinom(n=3, size=1, prob=0.10)
s11.5nf<-rbinom(n=3, size=1, prob=0.10)
s12.5nf<-rbinom(n=3, size=1, prob=0.10)
sampling.ocup1<- rbind(s1.1nf,s2.1nf,s3.1nf,s4.1nf,s5.1nf, s6.1nf, s7.1nf,s8.1nf,s9.1nf,s10.1nf,s11.1nf,s12.1nf,s1.1f,s2.1f,s3.1f,s4.1f,s5.1f, s6.1f, s7.1f,s8.1f,s9.1f,s10.1f,s11.1f,s12.1f,s1.2nf,s2.2nf,s3.2nf,s4.2nf,s5.2nf, s6.2nf, s7.2nf,s8.2nf,s9.2nf,s10.2nf,s11.2nf,s12.2nf,s1.2f,s2.2f,s3.2f,s4.2f,s5.2f, s6.2f, s7.2f,s8.2f,s9.2f,s10.2f,s11.2f,s12.2f,s1.3nf,s2.3nf,s3.3nf,s4.3nf,s5.3nf, s6.3nf, s7.3nf,s8.3nf,s9.3nf,s10.3nf,s11.3nf,s12.3nf,s1.3f,s2.3f,s3.3f,s4.3f,s5.3f, s6.3f, s7.3f,s8.3f,s9.3f,s10.3f,s11.3f,s12.3f,s1.4nf,s2.4nf,s3.4nf,s4.4nf,s5.4nf, s6.4nf, s7.4nf,s8.4nf,s9.4nf,s10.4nf,s11.4nf,s12.4nf,s1.4f,s2.4f,s3.4f,s4.4f,s5.4f, s6.4f, s7.4f,s8.4f,s9.4f,s10.4f,s11.4f,s12.4f,s1.5nf,s2.5nf,s3.5nf,s4.5nf,s5.5nf, s6.5nf, s7.5nf,s8.5nf,s9.5nf,s10.5nf,s11.5nf,s12.5nf,s1.5f,s2.5f,s3.5f,s4.5f,s5.5f, s6.5f, s7.5f,s8.5f,s9.5f,s10.5f,s11.5f,s12.5f)
sampling.cov<- df.values[,3:8]
sampling.cov
sampling.cov$ID[sampling.cov$ID == "1f"] <- "Yes"
levels(sampling.cov)
levels(sampling.cov$ID)
str(sampling.cov$ID)
n.levels(sampling.cov$ID)
nlevels(sampling.cov$ID)
summary(sampling.cov$ID)
sampling.cov<- df.values[,3:8]
summary(sampling.cov$ID)
levels(sampling.cov$ID)<-c("NO","YES","NO","YES","NO","YES","NO","YES","NO","YES")
summary(sampling.cov$ID)
library("raster", lib.loc="~/R/win-library/3.2")
sampling.ocup1<- rbind(s1.1nf,s2.1nf,s3.1nf,s4.1nf,s5.1nf, s6.1nf, s7.1nf,s8.1nf,s9.1nf,s10.1nf,s11.1nf,s12.1nf,s1.1f,s2.1f,s3.1f,s4.1f,s5.1f, s6.1f, s7.1f,s8.1f,s9.1f,s10.1f,s11.1f,s12.1f,s1.2nf,s2.2nf,s3.2nf,s4.2nf,s5.2nf, s6.2nf, s7.2nf,s8.2nf,s9.2nf,s10.2nf,s11.2nf,s12.2nf,s1.2f,s2.2f,s3.2f,s4.2f,s5.2f, s6.2f, s7.2f,s8.2f,s9.2f,s10.2f,s11.2f,s12.2f,s1.3nf,s2.3nf,s3.3nf,s4.3nf,s5.3nf, s6.3nf, s7.3nf,s8.3nf,s9.3nf,s10.3nf,s11.3nf,s12.3nf,s1.3f,s2.3f,s3.3f,s4.3f,s5.3f, s6.3f, s7.3f,s8.3f,s9.3f,s10.3f,s11.3f,s12.3f,s1.4nf,s2.4nf,s3.4nf,s4.4nf,s5.4nf, s6.4nf, s7.4nf,s8.4nf,s9.4nf,s10.4nf,s11.4nf,s12.4nf,s1.4f,s2.4f,s3.4f,s4.4f,s5.4f, s6.4f, s7.4f,s8.4f,s9.4f,s10.4f,s11.4f,s12.4f,s1.5nf,s2.5nf,s3.5nf,s4.5nf,s5.5nf, s6.5nf, s7.5nf,s8.5nf,s9.5nf,s10.5nf,s11.5nf,s12.5nf,s1.5f,s2.5f,s3.5f,s4.5f,s5.5f, s6.5f, s7.5f,s8.5f,s9.5f,s10.5f,s11.5f,s12.5f)
sampling.cov<- df.values[,3:8]
levels(sampling.cov$ID)<-c("NO","YES","NO","YES","NO","YES","NO","YES","NO","YES")
colnames(sampling.cov)<- c("Height","Fire_Interval", "Distance_to_Road", "Veg_Type", "Distance_to_Water", "Fire")
sim.occu<-unmarkedFrameOccu(y = sampling.ocup1, siteCovs = sampling.cov)
plot(sim.occu,panel=10)
model1.occu <- occu(~1 ~1, sim.occu)
model2.occu <- occu(~Height + Fire_Interval + Distance_to_Road +  Veg_Type +  Distance_to_Water + Fire ~ 1,sim.occu)
model3.occu <- occu(~Height + Fire_Interval + Distance_to_Road +  Veg_Type +  Distance_to_Water ~ 1,sim.occu)
fmlist<-fitList(Model1=model1.occu,Model2=model2.occu,Model3=model3.occu)
mod.sel<-modSel(fmlist)
new.data<-stack(topo,FireReturnAll,roaddist.r, Vegetation_existing, riverdist.r)
names(new.data)<-c("Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
occu.layer <- predict(model3.occu, type = "det", newdata=new.data)
mod.sel
plot(occu.layer)
result <- dropLayer(occu.layer, c(2:4))
plot(result, colNA="black")
pairs(occu.layer)
results.frequency<-specprop(s263)
library(tuneR)
library(seewave)
results.frequency<-specprop(s263)
?specprop
results.frequency<-specprop(spec(s263,f=500000))
results.frequency
results.frequency<-sapply(specprop(spec(s263,f=500000)))
results.frequency<-sapply(cbind,specprop(spec(s263,f=500000)))
results.frequency
results.frequency<-specprop(spec(s263,f=500000)))
results.frequency<-specprop(spec(s263,f=500000))
results.frequency<-data.frame(specprop(spec(s263,f=500000)))
results.frequency
View(results.frequency)
classistack<-stack(classes1,topo,FireReturnAll,roaddist.r, Vegetation_existing, riverdist.r)
names(classistack)<-c("Class""Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
valueclass <- getValues(classistack)
classistack<-stack(classes1,topo,FireReturnAll,roaddist.r, Vegetation_existing, riverdist.r)
names(classistack)<-c("Class","Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
valueclass <- getValues(classistack)
valuetable <- na.omit(valuetable)
classistack<-stack(classes1,topo,FireReturnAll,roaddist.r, Vegetation_existing, riverdist.r)
names(classistack)<-c("Class","Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
valueclass <- getValues(classistack)
valueclass <- na.omit(valueclass)
valueclass <- as.data.frame(valueclass)
val_1 <- subset(valuetable, class == 1)
val_2 <- subset(valuetable, class == 2)
val_3 <- subset(valuetable, class == 3)
val_4 <- subset(valuetable, class == 4)
val_5 <- subset(valuetable, class == 5)
plot(Height~Distance_to_Water, data=valueclass,type="n")
points(Height~Distance_to_Water, data=val_1, pch = ".", col = 1)
points(Distance_to_Water, height, data=val_2, pch = ".", col = 2)
points(Height~Distance_to_Water, data=val_3, pch = ".", col = 3)
points(Height~Distance_to_Water, data=val_4, pch = ".", col = 4)
points(Height~Distance_to_Water, data=val_5, pch = ".", col = 5)
legend("topright", legend=c("1", "2", "3","4","5"), fill=c(1, 2, 3,4,5), bg="white")
classistack<-stack(classes1,topo,FireReturnAll,roaddist.r, Vegetation_existing, riverdist.r)
names(classistack)<-c("Class","Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
valueclass <- getValues(classistack)
valueclass <- na.omit(valueclass)
valueclass <- as.data.frame(valueclass)
val_1 <- subset(valuetable, class == 1)
val_2 <- subset(valuetable, class == 2)
val_3 <- subset(valuetable, class == 3)
val_4 <- subset(valuetable, class == 4)
val_5 <- subset(valuetable, class == 5)
plot(Height~Distance_to_Water, data=valueclass,type="n")
points(Height~Distance_to_Water, data=val_1, pch = ".", col = 1)
classistack<-stack(classes1,topo,FireReturnAll,roaddist.r, Vegetation_existing, riverdist.r)
names(classistack)<-c("Class","Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
valueclass <- getValues(classistack)
valueclass <- na.omit(valueclass)
valueclass <- as.data.frame(valueclass)
val_1 <- subset(valuetable, class == 1)
val_2 <- subset(valuetable, class == 2)
val_3 <- subset(valuetable, class == 3)
val_4 <- subset(valuetable, class == 4)
val_5 <- subset(valuetable, class == 5)
plot(Height~Distance_to_Water, data=valueclass,type="n")
points(Height~Distance_to_Water, data=val_1, pch =1, col = 1)
classistack<-stack(classes1,topo,FireReturnAll,roaddist.r, Vegetation_existing, riverdist.r)
names(classistack)<-c("Class","Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
valueclass <- getValues(classistack)
valueclass <- na.omit(valueclass)
valueclass <- as.data.frame(valueclass)
val_1 <- subset(valuetable, class == 1)
val_2 <- subset(valuetable, class == 2)
val_3 <- subset(valuetable, class == 3)
val_4 <- subset(valuetable, class == 4)
val_5 <- subset(valuetable, class == 5)
plot(Height~Distance_to_Water, data=valueclass,type="n")
plot(Height~Distance_to_Water, data=val_1, pch =1, col = 1)
classistack<-stack(classes1,topo,FireReturnAll,roaddist.r, Vegetation_existing, riverdist.r)
names(classistack)<-c("Class","Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
valueclass <- getValues(classistack)
valueclass <- na.omit(valueclass)
valueclass <- as.data.frame(valueclass)
val_1 <- subset(valuetable, class == 1)
val_2 <- subset(valuetable, class == 2)
val_3 <- subset(valuetable, class == 3)
val_4 <- subset(valuetable, class == 4)
val_5 <- subset(valuetable, class == 5)
plot(Height~Distance_to_Water, data=valueclass,type="n")
plot(Height~Distance_to_Water, data=val_2, pch =1, col = 2)
classistack<-stack(classes1,topo,FireReturnAll,roaddist.r, Vegetation_existing, riverdist.r)
names(classistack)<-c("Class","Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
valueclass <- getValues(classistack)
valueclass <- na.omit(valueclass)
valueclass <- as.data.frame(valueclass)
val_1 <- subset(valuetable, class == 1)
val_2 <- subset(valuetable, class == 2)
val_3 <- subset(valuetable, class == 3)
val_4 <- subset(valuetable, class == 4)
val_5 <- subset(valuetable, class == 5)
plot(Height~Distance_to_Water, data=valueclass,type="n")
plot(Height~Distance_to_Water, data=val_3, pch =1, col = 2)
classistack<-stack(classes1,topo,FireReturnAll,roaddist.r, Vegetation_existing, riverdist.r)
names(classistack)<-c("Class","Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
valueclass <- getValues(classistack)
valueclass <- na.omit(valueclass)
valueclass <- as.data.frame(valueclass)
val_1 <- subset(valuetable, class == 1)
val_2 <- subset(valuetable, class == 2)
val_3 <- subset(valuetable, class == 3)
val_4 <- subset(valuetable, class == 4)
val_5 <- subset(valuetable, class == 5)
plot(Height~Distance_to_Water, data=valueclass,type="n")
plot(Height~Distance_to_Water, data=val_4, pch =1, col = 2)
classistack<-stack(classes1,topo,FireReturnAll,roaddist.r, Vegetation_existing, riverdist.r)
names(classistack)<-c("Class","Height","Fire_Interval", "Distance_to_Road","Veg_Type", "Distance_to_Water")
valueclass <- getValues(classistack)
valueclass <- na.omit(valueclass)
valueclass <- as.data.frame(valueclass)
val_1 <- subset(valuetable, class == 1)
val_2 <- subset(valuetable, class == 2)
val_3 <- subset(valuetable, class == 3)
val_4 <- subset(valuetable, class == 4)
val_5 <- subset(valuetable, class == 5)
plot(Height~Distance_to_Water, data=valueclass,type="n")
plot(Height~Distance_to_Water, data=val_5, pch =1, col = 2)
plot(Height~Distance_to_Road, data=valueclass,type="n")
plot(Height~Distance_to_Road, data=valueclass)
plot(Height~Fire_interval, data=valueclass)
plot(Height~Fire_Interval, data=valueclass)
plot(Height~Veg_type, data=valueclass)
plot(Height~Veg_Type, data=valueclass)
plot(Height~Fire_Interval, data=valueclass)
plot(Height~Fire_Interval, data=valueclass,type="n")
points(Height~Fire_Interval, data=val_1, pch = ".", col = 1, add=TRUE)
plot(Height~Fire_Interval, data=valueclass,type="n")
points(Height~Fire_Interval, data=val_1, pch = ".", col = 1)
plot(Height~Fire_Interval, data=valueclass,type="n")
points(Height~Fire_Interval, data=val_1, pch = ".", col = 1)
plot(Height~Fire_Interval, data=valueclass,type="n")
plot(Height~Fire_Interval, data=val_1, pch = ".", col = 1, add=TRUE)
plot(Height~Fire_Interval, data=valueclass,type="n")
points(Fire_Interval, Height, data=val_1, pch = ".", col = 1, add=TRUE)
plot(Height~Fire_Interval, data=valueclass,type="n")
points(Fire_Interval, Height, data=val_1, pch = ".", col = 1, add=TRUE)
df.values
df.values$Distance_to_Road
max(df.values$Distance_to_Road)
points1f
plot(points1f)
plot(points1f[1])
plot(points1f[1])
summary(points1f)
points1f
View(points1f)
points1f[1,]
plot(points1f[1,])
plot(points1f[2,])
plot(points1f[3,])
plot(points1f[4,])
points1f[3,]
library("rgdal", lib.loc="~/R/win-library/3.2")
ogrDrivers()
library("raster", lib.loc="~/R/win-library/3.2")
library("rasterVis", lib.loc="~/R/win-library/3.2")
plot(Topo)
plot(topo)
plot3D(topo)
plot3D(topo*PNF)
