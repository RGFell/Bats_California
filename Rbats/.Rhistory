AllLayers
topo.s<-scale(topo)
topo.s
plot(topo.s)
?scale
rasterRescale<-function(r){
((r-cellStats(r,"min"))/(cellStats(r,"max")-cellStats(r,"min")))
}
- See more at: http://www.timassal.com/?p=859#sthash.LmwUxrqt.dpuf
rasterRescale<-function(r){
((r-cellStats(r,"min"))/(cellStats(r,"max")-cellStats(r,"min")))
}
topo.s<-raserRescale(topo)
rasterRescale<-function(r){
((r-cellStats(r,"min"))/(cellStats(r,"max")-cellStats(r,"min")))
}
topo.s<-rasterRescale(topo)
plot(topo.s)
?rbinom
rbinom(n=30,siza=3,prob=0.8)
rbinom(n=30,size=3,prob=0.8)
rbinom(n=30,size=1,prob=0.8)
rbinom(n=30,size=3,prob=0.6)
rbinom(n=30,size=3,prob=0.6)
install.packages("unmarked")
library("unmarked", lib.loc="~/R/win-library/3.2")
library("knitr", lib.loc="~/R/win-library/3.2")
library("markdown", lib.loc="~/R/win-library/3.2")
library("knitr", lib.loc="~/R/win-library/3.2")
library("markdown", lib.loc="~/R/win-library/3.2")
knit('sampling_design2.rmd', 'sampling_design2.md')
plot(lidar.limit)
library("spatstat", lib.loc="~/R/win-library/3.2")
install.packages("splancs")
?ppp
bounding.box
?bounding.box
?density.ppp
library("splancs", lib.loc="~/R/win-library/3.2")
library("knitr", lib.loc="~/R/win-library/3.2")
library("markdown", lib.loc="~/R/win-library/3.2")
knit('Point_data2.rmd', 'Point_data2.md')
library("rgeos", lib.loc="~/R/win-library/3.2")
AllTreesMoon <- readOGR(dsn="C:/Users/usuario/Bats_California/layers",layer="AllTreesMerge")
R_CStackLimit = -1
AllTreesMoon <- readOGR(dsn="C:/Users/usuario/Bats_California/layers",layer="AllTreesMerge")
?R_CStackLimit
library("raster", lib.loc="~/R/win-library/3.2")
?stack
library("raster", lib.loc="~/R/win-library/3.2")
library("rasterVis", lib.loc="~/R/win-library/3.2")
library("maps", lib.loc="~/R/win-library/3.2")
library("maptools", lib.loc="~/R/win-library/3.2")
library("rgdal", lib.loc="~/R/win-library/3.2")
rivers <- readOGR(dsn="C:/Users/usuario/Bats_California/layers",layer="NHDFlowline")
rivers <- spTransform(rivers, CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
library("raster", lib.loc="~/R/win-library/3.2")
library("rasterVis", lib.loc="~/R/win-library/3.2")
library("maps", lib.loc="~/R/win-library/3.2")
library("maptools", lib.loc="~/R/win-library/3.2")
library("rgdal", lib.loc="~/R/win-library/3.2")
rivers <- readOGR(dsn="C:/Users/usuario/Bats_California/layers",layer="NHDFlowline")
rivers <- spTransform(rivers, CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
rivers
names(rivers)
plot(rivers)
rivers$FTYPE
rivers$FCODE
names(rivers)
rivers$GNIS_ID
names(rivers)
rivers$GNIS_NAME
names(rivers)
summary(rivers$GNIS_NAME)
names(rivers)
summary(rivers$FDATE)
names(rivers)
summary(rivers$RESOLUTION)
summary(rivers$GNIS_ID)
names(rivers)
summary(rivers$GNIS_NAME)
names(rivers)
summary(rivers$LENGTHKM)
summary(rivers$REACHCODE)
summary(rivers$LENGTHKM)
names(rivers)
summary(rivers$FLOWDIR)
names(rivers)
summary(rivers$WBAREA_PER)
names(rivers)
summary(rivers$FTYPE)
names(rivers)
summary(rivers$FCODE)
names(rivers)
summary(rivers$ENABLED)
names(rivers)
summary(rivers$SHAPE_Leng)
plot(rivers$Wildcat Creek)
plot(rivers$GNIS_NAME)
summary(rivers$GNIS_NAME)
plot(rivers[GNIS_NAME == "Freeman Creek"])
rivers[GNIS_NAME == "Freeman Creek"]
rivers[rivers$GNIS_NAME == "Freeman Creek"]
rivers$GNIS_NAME
rivers$GNIS_NAME
plot(rivers[GNIS_NAME == "Freeman Creek"])
plot(rivers["Freeman Creek"]
=
plot(rivers["Freeman Creek"])
plot(rivers, col=GNIS_NAME)
plot(rivers, col=rivers$GNIS_NAME)
library("latticeExtra", lib.loc="~/R/win-library/3.2")
library("raster", lib.loc="~/R/win-library/3.2")
print(points1nf)
?colnames
plot(rivers)
?rep
rep
rep
rep("x", times=5)
rep(x, times=5)
a=rep("x", times=5)
a
str(a)
str(a)
a=rep(x, times=5)
a=rep("x", times=5)
?kable
library("knitr", lib.loc="~/R/win-library/3.2")
library("dplyr", lib.loc="~/R/win-library/3.2")
?kable
?resample
?resample
library("raster", lib.loc="~/R/win-library/3.2")
?resample
library("raster", lib.loc="~/R/win-library/3.2")
library("rasterVis", lib.loc="~/R/win-library/3.2")
library("maps", lib.loc="~/R/win-library/3.2")
library("maptools", lib.loc="~/R/win-library/3.2")
library("rgdal", lib.loc="~/R/win-library/3.2")
library("latticeExtra", lib.loc="~/R/win-library/3.2")
library("dplyr", lib.loc="~/R/win-library/3.2")
SeralStage <-readGDAL("C:/Users/usuario/Bats_California/layers/SeralStage.asc")
SeralStage<-raster (SeralStage)
SeralStage
summary(SeralStage)
names(SeralStage)
roads.v <- readOGR(dsn="C:/Users/usuario/Bats_California/layers",layer="Roads")
roads.v <- spTransform(roads.v, CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
roads.v
names(roads.v)
roads.v$RTE_CN
names(roads.v)
roads.v$ID
names(roads.v)
roads.v$BMP
names(roads.v)
roads.v$EMP
names(roads.v)
roads.v$NAME
names(roads.v)
roads.v$BEGIN_TERM
roads.v$END_TERM
names(roads.v)
roads.v$END_TERMIN
names(roads.v)
roads.v$SEG_LENGTH
names(roads.v)
roads.v$ADMIN_ORG
names(roads.v)
roads.v$FUNCTIONAL
roads.v$FUNCTIONAL(ARTERIAL)
roads.v$FUNCTIONAL[ARTERIAL]
plot(roads.v$FUNCTIONAL)
plot(roads.v, col=roads.v$FUNCTIONAL)
plot(roads.v, lty=roads.v$FUNCTIONAL)
plot(roads.v, lw=roads.v$FUNCTIONAL)
roady<-as.SpatialLinesDataFrame(roads.v)
roady<-as.psp.SpatialLinesDataFrame(roads.v)
roady
summay(roady)
summary(roady)
names(roady)
roady$n
roady$ends
names(roady)
roady$marks
roady$markformat
names(roady)
roady$window
plot(roads.v, lw=roads.v$FUNCTIONAL)
plot(roads.v, lty=roads.v$FUNCTIONAL)
plot(roads.v$FUNCTIONAL[ARTERIAL])
roads.v$FUNCTIONAL[ARTERIAL]
roads.v$FUNCTIONAL
roads.v$FUNCTIONAL[A - ARTERIAL]
roads.v$FUNCTIONAL["A - ARTERIAL"]
roads.v$FUNCTIONAL["A - ARTERIAL"]
roads.v$FUNCTIONAL[A - ARTERIAL]
roads.v[A - ARTERIAL]
roads.v["A - ARTERIAL"]
plot(roads.v, col=roads.v$FUNCTIONAL)
names(roads.v)
plot(roads.v, col=roads.v$JURISDICTI)
roads.v$JURISDICTI)
roads.v$JURISDICTI
names(roads.v)
roads.v$LANES
names(roads.v)
roads.v$SYSTEM
names(roads.v)
roads.v$OBJECTIVE_
plot(roads.v$OBJECTIVE_)
names(roads.v)
plot(roads.v$COMMENTS)
plot(roads.v$FUNCTIONAL)
a<-roads.v[roads.v$FUNCTIONAL=="A - ARTERIAL"]
roads.v[roads.v$FUNCTIONAL=="A - ARTERIAL"]
roads.v[,roads.v$FUNCTIONAL=="A - ARTERIAL"]
roads.v[roads.v$FUNCTIONAL=="A - ARTERIAL",]
a<-roads.v[roads.v$FUNCTIONAL=="A - ARTERIAL",]
plot(a)
arterial<-roads.v[roads.v$FUNCTIONAL=="A - ARTERIAL",]
plot(roads.v$FUNCTIONAL)
arterial<-roads.v[roads.v$FUNCTIONAL=="A - ARTERIAL",]
collector<-roads.v[roads.v$FUNCTIONAL=="C - COLLECTOR",]
local<-roads.v[roads.v$FUNCTIONAL=="L - LOCAL",]
plot(arterial, col="red", lty=1, lw=2)
lines(collector, col="black", lty=2, lw=1)
lines(local, col="black", lty=3, lw=1)
names(local)
local$FUNCTIONAL
names(local)
local$JURISDICTI
PLOT(local$JURISDICTI)
plot(local$JURISDICTI)
_names
?names
install.packages("Simile")
library("raster", lib.loc="~/R/win-library/3.2")
library("rasterVis", lib.loc="~/R/win-library/3.2")
library("maps", lib.loc="~/R/win-library/3.2")
library("maptools", lib.loc="~/R/win-library/3.2")
library("rgdal", lib.loc="~/R/win-library/3.2")
library("latticeExtra", lib.loc="~/R/win-library/3.2")
library("dplyr", lib.loc="~/R/win-library/3.2")
PNF<- readGDAL("C:/Users/usuario/Bats_California/layers/PNF.asc")
PNF<-raster (PNF)
bc <- readGDAL("C:/Users/usuario/Bats_California/layers/burn_canopy.asc")
bc<-raster (bc)
bb <- readGDAL("C:/Users/usuario/Bats_California/layers/burn_basal.asc")
bb<-raster (bb)
bs <- readGDAL("C:/Users/usuario/Bats_California/layers/burn_severity.asc")
bs<-raster (bs)
topo <- readGDAL("C:/Users/usuario/Bats_California/layers/plumastopo.asc")
topo<-raster (topo)
Vegetation_existing <- readGDAL("C:/Users/usuario/Bats_California/layers/VegTypeAll.asc")
Vegetation_existing<-raster (Vegetation_existing)
FireReturnAll <- readGDAL("C:/Users/usuario/Bats_California/layers/FireReturnAll.asc")
FireReturnAll<-raster (FireReturnAll)
TreatmentsStorrie <- readGDAL("C:/Users/usuario/Bats_California/layers/TreatmentsStorrie.asc")
TreatmentsStorrie<-raster (TreatmentsStorrie)
FireHistory <- readGDAL("C:/Users/usuario/Bats_California/layers/FireHistory.asc")
FireHistory<-raster (FireHistory)
Goshawkforag <- readGDAL("C:/Users/usuario/Bats_California/layers/Goshawkforag.asc")
Goshawkforag<-raster (Goshawkforag)
GoshawkNEST <- readGDAL("C:/Users/usuario/Bats_California/layers/GoshawkNEST.asc")
GoshawkNEST<-raster (GoshawkNEST)
MartenHabit <- readGDAL("C:/Users/usuario/Bats_California/layers/MartenHabit.asc")
MartenHabit<-raster (MartenHabit)
SeralStage <-readGDAL("C:/Users/usuario/Bats_California/layers/SeralStage.asc")
SeralStage<-raster (SeralStage)
df.bb <- data.frame(id=c(NA,1,2,3,4,5,6,7,255), v=c(0,1,2,3,4,5,6,7,8))#Change outlayers and extract NAs
bb1 <- subs(bb, df.bb,subswithNA=FALSE)
df.bs <- data.frame(id=c(NA,1,2,3,4,255), v=c(0,1,2,3,4,5))
bs1 <- subs(bs, df.bs,subswithNA=FALSE)
df.bc <- data.frame(id=c(NA,1,2,3,4,5,255), v=c(0,1,2,3,4,5,6))
bc1 <- subs(bc, df.bc,subswithNA=FALSE)
lidar.limit <- readOGR(dsn="C:/Users/usuario/Bats_California/layers",layer="LiDAR_Boundary")
lidar.limit <- spTransform(lidar.limit, CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
bb<-projectRaster(bb1, PNF)
bs<-projectRaster(bs1, PNF)
bc<-projectRaster(bc1, PNF)
Vegetation_existing<-projectRaster(Vegetation_existing, PNF)
FireReturnAll<-projectRaster(FireReturnAll, PNF)
TreatmentsStorrie<-projectRaster(TreatmentsStorrie, PNF)
FireHistory <-projectRaster(FireHistory, PNF)
Goshawkforag <-projectRaster(Goshawkforag,PNF)
GoshawkNEST<- projectRaster(GoshawkNEST, PNF)
MartenHabit<- projectRaster(MartenHabit, PNF)
SeralStage<- projectRaster(SeralStage,PNF)
plot(Vegetation_existing)
Vegetation_existing <- readGDAL("C:/Users/usuario/Bats_California/layers/VegTypeAll.asc")
Vegetation_existing<-raster (Vegetation_existing)
plot(Vegetation_existing)
Vegetation_existing<-projectRaster(Vegetation_existing, PNF)
plot(FireReturnAll)
bc<-resample(bc, PNF)
bb<-resample(bb, PNF)
bs<-resample(bs, PNF)
Vegetation_existing<-resample(Vegetation_existing, PNF, method="ngb")
FireReturnAll<-resample(FireReturnAll, PNF, method="ngb")
TreatmentsStorrie<-resample(TreatmentsStorrie, PNF)
FireHistory<-resample(FireHistory, PNF)
topo<-resample(topo,PNF)
Goshawkforag<-resample(Goshawkforag,PNF, method="ngb")
GoshawkNEST <- resample(GoshawkNEST, PNF, method="ngb")
TreatmentsStorrie[is.na(TreatmentsStorrie)] <- 0
MartenHabit <- resample (MartenHabit, PNF, method="ngb")
SeralStage <- resample (SeralStage, PNF, method="ngb")
ratify(Vegetation_existing, count=TRUE)
ratify(FireReturnAll, count=TRUE)
FireReturnAll[FireReturnAll < 0] <- NA
plot(FireReturnAll)
library(dplyr)
library(tuneR)
library(seewave)
s260<-readWave("C:/Users/usuario/Desktop/batsound/aM00260.WAV")
spectro(s260, f=500000, scale=FALSE, main="260",palette=temp.colors)
s263<-readWave("C:/Users/usuario/Desktop/batsound/aM00263.WAV")
spectro(s263, f=500000 scale=FALSE, main="263",palette=temp.colors)
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
s263<-readWave("C:/Users/usuario/Desktop/batsound/aM00263.WAV",from=0.8,to=2.3,units="seconds")
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
library("seewave", lib.loc="~/R/win-library/3.2")
acoustat263<-acoustat(s263,f=500000,plot=TRUE)
acoustat263
names(acoustat263)
acoustat263$time.contour
plot(acoustat263$time.contour)
plot(acoustat263$time.contour, type="l")
names(acoustat263)
plot(acoustat263$freq.contour)
plot(acoustat263$freq.contour, type=l)
plot(acoustat263$freq.contour, type="l")
acoustat263$time.P1
acoustat263$time.M
acoustat263$time.P2
acoustat263$time.IPR
acoustat263$freq.P1
acoustat263$freq.M
acoustat263$freq.P""
acoustat263$freq.P2
acoustat263$freq.IPR
acoustat263<-acoustat(s263,f=500000,plot=TRUE)
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
spectro(s263, f=500000, scale=FALSE,flim=c(20,50), main="263",palette=temp.colors)
spectro(s263, f=500000, scale=FALSE,flim=c(40,100), main="263",palette=temp.colors)
s260<-readWave("C:/Users/usuario/Desktop/batsound/aM00260.WAV")
spectro(s260, f=500000, scale=FALSE, main="260",palette=temp.colors)
s263<-readWave("C:/Users/usuario/Desktop/batsound/aM00263.WAV",from=0.8,to=2.3,units="seconds")
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
s260<-readWave("C:/Users/usuario/Desktop/batsound/aM00260.WAV")
spectro(s260, f=500000, scale=FALSE, main="260",palette=temp.colors)
s263<-readWave("C:/Users/usuario/Desktop/batsound/aM00263.WAV",units="seconds")
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
acoustat263<-acoustat(s263,f=500000,plot=TRUE)
data(sheep)
ceps(sheep,f=8000,at=0.4,wl=1024)
acoustat263
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
res <- autoc(s263, f=500000, threshold=5, fmin=15, fmax=210, plot=FALSE)
points(res, pch=20)
legend(0.5, 3.6, "Fundamental frequency", pch=20, bty=0, cex=0.7)
s263<-readWave("C:/Users/usuario/Desktop/batsound/aM00263.WAV",units="seconds")
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
res <- autoc(s263, f=500000, threshold=5, fmin=20, fmax=200, plot=FALSE)
points(res, pch=20)
legend(0.5, 3.6, "Fundamental frequency", pch=20, bty=0, cex=0.7)
res <- autoc(s263, f=500000, threshold=5, fmin=20, fmax=200, plot=FALSE)
res <- autoc(sheep, f=8000, threshold=5, fmin=100, fmax=700, plot=FALSE)
spectro(sheep, f=8000, ovlp=75, scale=FALSE)
points(res, pch=20)
legend(0.5, 3.6, "Fundamental frequency", pch=20, bty=0, cex=0.7)
s263<-readWave("C:/Users/usuario/Desktop/batsound/aM00263.WAV",units="seconds")
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
res <- autoc(s263, f=500000, threshold=5, fmin=100, fmax=700, plot=FALSE)
points(res, pch=20)
legend(0.5, 3.6, "Fundamental frequency", pch=20, bty=0, cex=0.7)
legend(1.5, 200, "Fundamental frequency", pch=20, bty=0, cex=0.7)
s263<-readWave("C:/Users/usuario/Desktop/batsound/aM00263.WAV",units="seconds")
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
res <- autoc(s263, f=500000, threshold=5, fmin=100, fmax=200000, plot=FALSE)
points(res, pch=20)
legend(1.5, 200, "Fundamental frequency", pch=20, bty=0, cex=0.7)
lines(res)
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
lines(res)
res
require(rgl)
data(tico)
spectro3D(tico,f=22050,wl=512,ovlp=75,zp=16,maga=4,palette=rev.terrain.colors)
data(sheep)
sheepc <- cutw(sheep, f=8000, from = 0.19, to = 2.3)
cepstro(sheepc,f=8000)
data(tico)
crest(tico, f=22050)
crest(tico, f=22050, plot=TRUE, sym="-")
crest(s263, f=500000, plot=TRUE, sym="-")
crest(s260, f=500000, plot=TRUE, sym="-")
acoustat263<-acoustat(s263,f=500000,plot=TRUE)
acoustat260<-acoustat(s260,f=500000,plot=TRUE)
acoustat32<-acoustat(s32,f=500000,plot=TRUE)
s32<-readWave("C:/Users/usuario/Desktop/batsound/aM00032.WAV")
spectro(s32, f=500000, flim=c(0,245), scale=FALSE, main="32")
s32b<-readWave("C:/Users/usuario/Desktop/batsound/aM00032.WAV", from=2.4,to=2.6,units="seconds")
play(s32b)
acoustat32<-acoustat(s32,f=500000,plot=TRUE)
acoustat32b<-acoustat(s32b,f=500000,plot=TRUE)
acoustat260<-acoustat(s260,f=500000,plot=TRUE)
acoustat263<-acoustat(s263,f=500000,plot=TRUE)
names(acoustat263)
plot(acoustat263$freq.contour)
plot(acoustat263$freq.contour,type="l")
plot(acoustat260$freq.contour,type="l")
plot(acoustat32$freq.contour,type="l")
plot(acoustat32b$freq.contour,type="l")
acoustat263<-acoustat(s263,f=500000,plot=TRUE)
acoustat260<-acoustat(s260,f=500000,plot=TRUE)
names(acoustat263)
acoustat263$freq.P1
acoustat260$freq.P1
acoustat32$freq.P1
acoustat263$freq.P2
acoustat260$freq.P2
acoustat32$freq.P2
acoustat32$freq.M
acoustat260$freq.M
acoustat263$freq.M
acoustat263$freq.IPR
acoustat260$freq.IPR
acoustat260$freq.IPR
acoustat263$freq.IPR
acoustat32$freq.IPR
acoustat260<-acoustat(s260,f=500000,plot=TRUE)
acoustat263<-acoustat(s260,f=500000,plot=TRUE)
acoustat32<-acoustat(s260,f=500000,plot=TRUE)
acoustat32<-acoustat(s260,f=500000,plot=TRUE)
acoustat32<-acoustat(s32,f=500000,plot=TRUE)
acoustat32<-acoustat(s32,f=500000,plot=TRUE)
acoustat263<-acoustat(s263,f=500000,plot=TRUE)
acoustat260<-acoustat(s260,f=500000,plot=TRUE)
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors, xlim=c(0.5,1))
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
s263<-readWave("C:/Users/usuario/Desktop/batsound/aM00263.WAV")
s263<-readWave("C:/Users/usuario/Desktop/batsound/aM00263.WAV")
spectro(s263, f=500000, scale=FALSE, main="263",palette=temp.colors)
acoustat263<-acoustat(s263,f=500000,plot=TRUE)
acoustat260<-acoustat(s260,f=500000,plot=TRUE)
acoustat27<-acoustat(s27,f=500000,plot=TRUE)
s27<-readWave("C:/Users/usuario/Desktop/batsound/aM00027.WAV")
spectro(s27, f=500000, flim=c(0,245), scale=FALSE, main="27")
acoustat27<-acoustat(s27,f=500000,plot=TRUE)
acoustat263<-acoustat(s263,f=500000,plot=TRUE)
acoustat263<-acoustat(s263,f=500000,plot=TRUE)
acoustat32<-acoustat(s32,f=500000,plot=TRUE)
play(s32)
s34<-readWave("C:/Users/usuario/Desktop/batsound/aM00034.WAV",from=0.12,to=0.15,units="seconds")
spectro(s34, f=500000, flim=c(0,80), scale=FALSE, main="34",palette=temp.colors)
play(34)
play(s34)
acoustat34<-acoustat(s34,f=500000,plot=TRUE)
s34<-readWave("C:/Users/usuario/Desktop/batsound/aM00034.WAV")
spectro(s34, f=500000, flim=c(0,80), scale=FALSE, main="34",palette=temp.colors)
acoustat34<-acoustat(s34,f=500000,plot=TRUE)
acoustat263<-acoustat(s263,f=500000,plot=TRUE)
acoustat32<-acoustat(s32,f=500000,plot=TRUE)
acoustat32<-acoustat(s32,f=500000,plot=TRUE)
acoustat34<-acoustat(s34,f=500000,plot=TRUE)
acoustat263<-acoustat(s263,f=500000,plot=TRUE)
acoustat260<-acoustat(s260,f=500000,plot=TRUE)
names(acoustat260)
acoustat260$freq.P1
acoustat260$freq.P2
acoustat260$freq.M
acoustat260$freq.IPR
acoustat263$freq.P1
acoustat263$freq.P2
acoustat263$freq.M
acoustat263$freq.IPR
acoustat32$freq.P1
acoustat32$freq.P2
acoustat32$freq.M
acoustat32$freq.IPR
plot(acoustat263$freq.countour,type="l")
plot(acoustat263$freq.countour,type="l")
names(acoustat263)
plot(acoustat263$freq.contour,type="l")
plot(acoustat263$freq.countour,type="l")
plot(acoustat263$freq.contour,type="l")
plot(acoustat260$freq.contour,type="l")
plot(acoustat32$freq.contour,type="l")
library("rgdal", lib.loc="~/R/win-library/3.2")
?tempdir
?dir
slope<-terrain(topo, opt=c("slope"), unit= "degrees",neighbors=8)
plot (slope)
summary(slope)
slope.20<-slope[FireReturnAll > 20] <- NA
plot(slope.20)
plot(slope.20)
slope<-terrain(topo, opt=c("slope"), unit= "degrees",neighbors=8)
plot (slope)
summary(slope)
slope.20<-slope[slope > 20] <- NA
plot(slope.20)
slope.15<-slope[slope > 15] <- NA
slope.15
slope[slope > 15] <- NA
plot(slope)
plot(slope, colNA="black")
